{"version":3,"sources":["components/Controls/Input/Input.js","../node_modules/vanila-js-validation/src/patterns.js","../node_modules/vanila-js-validation/src/validation.js","../node_modules/@material-ui/core/esm/Card/Card.js","components/AuthWrapper/AuthWrapper.js","containers/Auth/ForgetPassword/ForgetPassword.js"],"names":["InputField","name","id","className","label","value","error","changeHandler","helperText","isMultiline","isRequired","max","disabled","type","inputProps","maxLength","variant","fullWidth","onChange","multiline","rows","character","number","email","arNumbers","saudiMobile","Validation","prototype","isCharacter","patterns","test","toString","toLowerCase","isValidEmail","isEqual","firstValue","secondValue","trim","exceedMaxLength","length","matchMinLength","isNumber","isSaudiMobile","toEnglishNumber","map","num","found","find","arNum","indexOf","join","split","Card","React","props","ref","classes","_props$raised","raised","other","_objectWithoutProperties","Paper","_extends","clsx","root","elevation","withStyles","overflow","useStyles","makeStyles","minWidth","padding","margin","AuthWrapper","header","content","handleSubmit","LanguageBtn","color","Button","handleClick","ForgetPassword","handleLogin","state","forget_password_form","forgetPasswordRequest","handleChange","e","setState","target","renderFormContent","messages","intl","formControl","this","auth","forgetPassword","Component","ForgetPasswordComponent","injectIntl","connect"],"mappings":"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","file":"static/js/6.4fd55a25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nexport const InputField = ({\r\n  name,\r\n  id,\r\n  className,\r\n  label,\r\n  value,\r\n  error,\r\n  changeHandler,\r\n  helperText,\r\n  isMultiline,\r\n  isRequired,\r\n  max,\r\n  disabled,\r\n}) => {\r\n  return (\r\n    <TextField\r\n      disabled={disabled}\r\n      className={`my-3 ${className ? className : \"\"}`}\r\n      name={name}\r\n      id={id}\r\n      type=\"text\"\r\n      label={isRequired ? label + \"*\" : label}\r\n      inputProps={{ maxLength: max ? max : isMultiline ? 500 : 50 }}\r\n      variant=\"outlined\"\r\n      fullWidth\r\n      value={value}\r\n      error={error}\r\n      helperText={error && helperText}\r\n      onChange={changeHandler}\r\n      multiline={isMultiline}\r\n      rows={isMultiline ? 3 : 1}\r\n    />\r\n  );\r\n};\r\n","/**\n * Regex pattern for full english characters\n */\nexport const character = /^[a-zA-Z]+$/;\n\n/**\n * Regex pattern for numbers\n */\nexport const number = /^[0-9]+$/;\n\n/**\n * Regex pattern for valid email\n */\nexport const email = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,})$/\n\n/**\n * Regex pattern for arabic numbers\n */\n\nexport const arNumbers = ['٠', '١' , '٢','٣' ,'٤', '٥', '٦', '٧', '٨','٩'];\n\n/**\n * Regex pattern for valid saudi mobile number\n */\nexport const saudiMobile = /^(009665|9665|\\+9665|05|5)(5|0|3|6|4|9|1|8|7)([0-9]{7})$/;\n\n/**\n * Regex pattern for arabic numbers\n */\nexport const arNumber  = /^[\\u0621-\\u064A]$/;\n","import * as patterns from './patterns';\n\n/**\n * Check whether given value was character or not\n * @param {*} value given value wanted to cheek it\n * @returns {boolean} true if was character, otherwise false\n */\nconst isCharacter = (value) => patterns.character.test(value.toString().toLowerCase());\n\n/**\n * Check whether given value was valid email or not\n * @param {*} value given value wanted to cheek it\n * @returns {boolean} true if was valid email, otherwise false\n */\nconst isValidEmail = (value) => patterns.email.test(value.toString().toLowerCase());\n\n/**\n * Check whether given both values was equal or not\n * @param  {*}  firstValue  first value wanted to check\n * @param  {*}  secondValue second value wanted to check\n * @returns {boolean} true if was equal, otherwise false\n */\nconst isEqual = (firstValue, secondValue) => firstValue.toString().trim().toLowerCase() === secondValue.toString().trim().toLowerCase();\n\n/**\n * Check whether given value has been exced given length\n * @param  {*} value  value want to check\n * @param  {number} length maximum length value\n * @returns {boolean} true if was exceed, otherwise false\n */\nconst exceedMaxLength = (value, length) =>  value.toString().trim().length > length;\n\n/**\n * Check whether given value has been match minmum length\n * @param  {*} value  value want to check\n * @param  {number} length minmum length value\n * @returns {boolean} true if was match, otherwise false\n */\nconst matchMinLength = (value, length) =>  value.toString().trim().length >= length;\n\n/**\n * Check whether given value was number or not\n * @param  {*} value  value want to check\n * @returns {boolean} true if was number, otherwise false\n */\nconst isNumber = (value) => patterns.number.test(value.toString().trim().toLowerCase());\n\n/**\n * Check whether given value was required or not\n * @param  {*} value  value want to check\n * @returns {boolean} true if was required, otherwise false\n */\nconst isRequired = (value) => value.toString().trim().length === 0;\n\n/**\n * Check whether given value was saudi mobile\n * @param  {*} value  value want to check\n * @returns {boolean} true if was required, otherwise false\n */\nconst isSaudiMobile = (value) => patterns.saudiMobile.test(value.toString().toLowerCase());\n\n/**\n * Convert given english numbers to arabic numbers\n * @param  {[]} values  array of values for english numbers\n * @return {[]} converted arabic numbers\n */\n\nconst toEnglishNumber = (value) =>  {\n    return [...value]\n    .map(num => {\n        let found = patterns.arNumbers.find(arNum => arNum === num);\n        found ? num = patterns.arNumbers.indexOf(num).toString() : num = num;\n        return num;\n    }).join().toString().split(',').join('');\n}\n\n/**\n * Validation Utility class\n * @constructor\n */\nfunction Validation() {}\nValidation.prototype.isCharacter = isCharacter;\nValidation.prototype.isValidEmail = isValidEmail;\nValidation.prototype.isEqual = isEqual;\nValidation.prototype.exceedMaxLength = exceedMaxLength;\nValidation.prototype.matchMinLength = matchMinLength;\nValidation.prototype.isNumber = isNumber;\nValidation.prototype.isRequired = isRequired;\nValidation.prototype.isSaudiMobile = isSaudiMobile;\nValidation.prototype.toEnglishNumber = toEnglishNumber;\n\nexport default Validation = new Validation();","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = /*#__PURE__*/React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return /*#__PURE__*/React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import React from \"react\";\r\nimport { Card, makeStyles } from \"@material-ui/core\";\r\nimport { ButtonComponent } from \"../Controls/Button/Button\";\r\nimport LanguageBtn from \"../LanguageBtn/LanguageBtn\";\r\nimport \"./AuthWrapper.scss\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    padding: \"2em\",\r\n    margin: \"1em\",\r\n  },\r\n});\r\n\r\nexport const AuthWrapper = ({ header, content, handleSubmit }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className=\"authWrapper d-flex justify-content-center align-items-center\">\r\n      <Card className={classes.root}>\r\n        <div className=\"d-flex justify-content-between mb-4 flex-wrap\">\r\n          <h2>{header}</h2>\r\n          <LanguageBtn color={\"text-dark\"} />\r\n        </div>\r\n        {content}\r\n        <ButtonComponent\r\n          content={header}\r\n          variant=\"contained\"\r\n          classes=\"mx-auto w-100 my-4\"\r\n          handleClick={handleSubmit}\r\n          color=\"secondary\"\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport Validation from \"vanila-js-validation\";\r\nimport { AuthWrapper } from \"../../../components/AuthWrapper/AuthWrapper\";\r\nimport { InputField } from \"../../../components/Controls/Input/Input\";\r\nimport { forgetPasswordRequest } from \"../../../redux/actions/auth\";\r\n\r\nclass ForgetPassword extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      forget_password_form: {\r\n        email: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  handleLogin = () => {\r\n    const {\r\n      forget_password_form,\r\n      forget_password_form: { email },\r\n    } = this.state;\r\n    const { forgetPasswordRequest } = this.props;\r\n    !Validation.isRequired(email) && forgetPasswordRequest(forget_password_form);\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      forget_password_form: {\r\n        [e.target.name]: e.target.value,\r\n      },\r\n    });\r\n  };\r\n\r\n  renderFormContent = () => {\r\n    const {\r\n      intl: { messages },\r\n    } = this.props;\r\n    const {\r\n      forget_password_form: { email },\r\n    } = this.state;\r\n    return (\r\n      <InputField\r\n        name=\"email\"\r\n        id=\"email\"\r\n        label={messages.formControl.email}\r\n        value={email}\r\n        changeHandler={this.handleChange}\r\n        isRequired={true}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      intl: { messages },\r\n    } = this.props;\r\n    return (\r\n      <AuthWrapper\r\n        header={messages.auth.forgetPassword}\r\n        content={this.renderFormContent()}\r\n        handleSubmit={this.handleLogin}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst ForgetPasswordComponent = injectIntl(ForgetPassword);\r\n\r\nexport default connect(null, { forgetPasswordRequest })(ForgetPasswordComponent);\r\n"],"sourceRoot":""}